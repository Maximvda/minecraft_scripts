-- Helper variables
local FORWARD = 1
local UP = 2
local DOWN = 3
local LEFT = 4
local RIGHT = 5
local BACKWARD = 6

local function Crunchy()
    -- Initialisation
    local crunchy = {}
    -- Control variables
    crunchy.idle = true
    crunchy.moving_home = false

    -- Vein checking variables
    crunchy.direction = nil
    crunchy.command_list = {}
    crunchy.current_command = nil
    crunchy.forward_pos = 1
    crunchy.tunnel_pos = 0
    crunchy.total_blocks_back = 0
    crunchy.depth = 40
    crunchy.chunky_distance = 0

    -- Information
    crunchy.gps_pos = nil
    crunchy.fuel = turtle.getFuelLevel()
    local mine = mine_api.MineApi()

    -- Main loop which is executed
    function crunchy.tick()
        -- Being idle
        if crunchy.idle then
            os.sleep(5)
            return
        end
        -- Going back home
        if crunchy.moving_home then
            crunchy.move_home()
            return
        end

        -- Check the depth of turtle
        if (crunchy.pos_y > crunchy.depth) then
            crunchy.dig_down()
        elseif crunchy.find_tunnel_end then
            -- Go to position of corridor
            crunchy.find_tunnel()
        else
            crunchy.strip_mine()
        end
        -- Finally we need to check if we need to go back home
        crunchy.check_go_back()
    end

    function crunchy.move_home()
        if crunchy.tunnel_pos > 0 then
            mine_api.move_turtle(turtle.back)
            crunchy.tunnel_pos = crunchy.tunnel_pos - 1
            if crunchy.tunnel_pos == 0 then
                if crunchy.tunnel_side == LEFT then
                    mine_api.move_turtle(turtle.turnRight)
                else
                    mine_api.move_turtle(turtle.turnLeft)
                end
            end
        elseif crunchy.forward_pos > 1 then
            mine_api.move_turtle(turtle.back)
            crunchy.forward_pos = crunchy.forward_pos - 1
        elseif crunchy.pos_y < crunchy.home_y then
            mine_api.move_turtle(turtle.up)
            crunchy.pos_y = crunchy.pos_y + 1
        else
            crunchy.total_blocks_back = crunchy.total_blocks_back + 1
            crunchy.empty_items()
            crunchy.moving_home = false
            crunchy.idle = true
        end
        crunchy.total_blocks_back = crunchy.total_blocks_back - 1
    end

    function crunchy.dig_down()
        turtle.digDown()
        mine_api.move_turtle(turtle.down)
        link_class.get().chunky_command(DOWN)
        crunchy.pos_y = crunchy.pos_y - 1 -- Go down 1 depth
        crunchy.total_blocks_back = crunchy.total_blocks_back + 1
    end

    function crunchy.forward()
        mine.dig_falling(turtle.dig, turtle.inspect, turtle.forward)
    end

    function crunchy.move_forwards()
        crunchy.forward()
        crunchy.tunnel_pos = crunchy.tunnel_pos + 1
        crunchy.total_blocks_back = crunchy.total_blocks_back + 1
        crunchy.checking_vein = true
    end

    function crunchy.up()
        mine.dig_falling(turtle.digUp, turtle.inspectUp, turtle.up)
    end

    function crunchy.strip_mine()
        -- Vein checking order is up,
        if crunchy.checking_vein then
            if crunchy.check_vein() then
                mine.mine_vein()
            end
            crunchy.checking_vein = false
            if crunchy.current_command then
                crunchy.finish_chunky_command()
            else
                mine.dig_falling(turtle.digUp, turtle.inspectUp, nil)
                link_class.get().chunky_command(FORWARD)
            end
        -- When commands available from chunky first execute them
        elseif #crunchy.command_list > 0 then
            crunchy.handle_command(table.remove(crunchy.command_list, 1))
        else
            crunchy.move_forwards()
        end
    end

    function crunchy.check_vein()
        if mine.is_treasure(turtle.inspectUp) then
            return true
        end
        if mine.is_treasure(turtle.inspectDown) then
            return true
        end
        mine_api.move_turtle(turtle.turnLeft)
        if mine.is_treasure(turtle.inspect) then
            mine_api.move_turtle(turtle.turnRight)
            return true
        end
        crunchy.full_turn()
        if mine.is_treasure(turtle.inspect) then
            mine_api.move_turtle(turtle.turnLeft)
            return true
        end
        mine_api.move_turtle(turtle.turnLeft)
        return false
    end

    function crunchy.buffer_chunky_commands(command)
        table.insert(crunchy.command_list, command)
    end

    function crunchy.handle_command(command)
        crunchy.chunky_distance = math.abs(crunchy.tunnel_pos-command[2])
        file_sys.log_to_file("Handling command: "..command[1].. " with distance: "..crunchy.chunky_distance)
        for i=1,crunchy.chunky_distance+1 do
            mine_api.move_turtle(turtle.back)
            file_sys.log_to_file("b")
        end
        if command[1] == UP then
            crunchy.up()
            crunchy.up()
            crunchy.forward()
        elseif command[1] == LEFT then
            crunchy.up()
            mine_api.move_turtle(turtle.turnLeft)
            crunchy.forward()
        elseif command[1] == RIGHT then
            crunchy.up()
            mine_api.move_turtle(turtle.turnRight)
            crunchy.forward()
        end
        crunchy.current_command = command[1]
        crunchy.checking_vein = true
    end

    function crunchy.finish_chunky_command()
        if crunchy.current_command == UP then
            mine_api.move_turtle(turtle.back)
            mine_api.move_turtle(turtle.down)
            mine_api.move_turtle(turtle.down)
        elseif crunchy.current_command == LEFT then
            mine_api.move_turtle(turtle.back)
            mine_api.move_turtle(turtle.down)
            mine_api.move_turtle(turtle.turnRight)
        elseif crunchy.current_command == RIGHT then
            mine_api.move_turtle(turtle.back)
            mine_api.move_turtle(turtle.down)
            mine_api.move_turtle(turtle.turnLeft)
        end
        for i=1,crunchy.chunky_distance+1 do
            crunchy.forward()
        end
        crunchy.checking_vein = false
        crunchy.current_command = nil
    end

    function crunchy.find_tunnel()
        if crunchy.found_tunnel_pos == nil then
            crunchy.find_tunnel_pos()
        end
        -- Move till tunnel end
        if crunchy.forward_pos < crunchy.found_tunnel_pos  then
            crunchy.forward()
            mine.dig_falling(turtle.digUp, turtle.inspectUp, nil)
            link_class.get().chunky_command(FORWARD)
            crunchy.forward_pos = crunchy.forward_pos + 1
            crunchy.total_blocks_back = crunchy.total_blocks_back + 1
            return
        end
        if crunchy.tunnel_side == LEFT then
            file_sys.log_to_file("Tunnel side left")
            mine_api.move_turtle(turtle.turnLeft)
            link_class.get().chunky_command(LEFT)
        elseif crunchy.tunnel_side == RIGHT then
            file_sys.log_to_file("Tunnel side right")
            mine_api.move_turtle(turtle.turnRight)
            link_class.get().chunky_command(RIGHT)
        end
        local length = 0
        if crunchy.tunnel_side == LEFT then
            length =  crunchy.tunnel_map[crunchy.found_tunnel_pos][1]
        else
            length =  crunchy.tunnel_map[crunchy.found_tunnel_pos][2]
        end
        while crunchy.tunnel_pos < length do
            crunchy.forward()
            link_class.get().chunky_command(FORWARD)
            crunchy.tunnel_pos = crunchy.tunnel_pos + 1
            crunchy.total_blocks_back = crunchy.total_blocks_back + 1
        end

        crunchy.find_tunnel_end = false
    end

    function crunchy.find_tunnel_pos()
        print("Searching tunnel pos")
        local main_depth = 0
        local min = nil
        local tunnel_start = 0
        local max_key = 0
        for key, _ in pairs(crunchy.tunnel_map) do
            if min == nil then
                min = key + crunchy.tunnel_map[key][1]
            end
            local dist = key + crunchy.tunnel_map[key][1]
            if dist < min then
                min = dist
                tunnel_start = key
                crunchy.tunnel_side = LEFT
            end
            local dist = key + crunchy.tunnel_map[key][2]
            if dist < min then
                min = dist
                tunnel_start = key
                crunchy.tunnel_side = RIGHT
            end
            max_key = key
        end

        if max_key + 3 < min then
            tunnel_start = max_key + 3
            crunchy.tunnel_map[max_key+3] = {0, 0}
        end
        print("Tunnel start at " .. tunnel_start)
        crunchy.found_tunnel_pos = tunnel_start
    end

    function crunchy.check_go_back()
        if turtle.getItemCount(1) > 2 then
            if crunchy.fuel < crunchy.total_blocks_back + 400 then
                turtle.refuel(1)
            end
        end
        if crunchy.fuel < crunchy.total_blocks_back + 100 then
            print("No fuel left, going home")
            crunchy.go_home()
        end
        -- Check for full inventory
        if turtle.getItemCount(15) ~= 0 then
            print("No inventory left, going home")
            crunchy.go_home()
        end
    end

    function crunchy.empty_items()
        -- Don't drop coal in inventory 0
        crunchy.full_turn()
        for i=2,16 do
            turtle.select(i)
            --turtle.drop(64)
        end
        turtle.select(1)
        crunchy.full_turn()
    end

    function crunchy.full_turn()
        mine_api.move_turtle(turtle.turnLeft)
        mine_api.move_turtle(turtle.turnLeft)
    end

    ---------------------------------------------
    -- Functions which can be called by remote --
    -- Can only start if gps is retrieved
    function crunchy.start()
        if not crunchy.idle then
            return
        end
        crunchy.link = link_class.get()
        while crunchy.link.chunky == nil do
            rednet.broadcast(config.request_chunky)
        end
        while crunchy.gps_pos == nil do
            crunchy.update_gps()
        end
        crunchy.pos_y = crunchy.gps_pos[2]
        crunchy.home_y = crunchy.pos_y
        crunchy.idle = false
        crunchy.checking_vein = false
        crunchy.found_tunnel_pos = nil
        crunchy.find_tunnel_end = true
        crunchy.tunnel_side = LEFT
        crunchy.tunnel_map = file_sys.load_map(crunchy.depth)
    end

    function crunchy.go_home()
        link_class.get().chunky_command(BACKWARD)
        -- Store the tunnel map
        if crunchy.tunnel_side == LEFT then
            crunchy.tunnel_map[crunchy.forward_pos][1] = crunchy.tunnel_pos
        else
            crunchy.tunnel_map[crunchy.forward_pos][2] = crunchy.tunnel_pos
        end
        file_sys.save_tunnel_map(crunchy.depth, crunchy.tunnel_map)
        os.sleep(5)
        crunchy.moving_home = true
    end

    function crunchy.set_depth(depth)
        crunchy.depth = depth
    end

    -------------------
    -- INFO FUNCTION --
    function crunchy.get_info()
        local info = {}
        crunchy.fuel = turtle.getFuelLevel()
        info.fuel = crunchy.fuel
        info.map = crunchy.map
        crunchy.update_gps()
        info.gps = crunchy.gps_pos
        info.idle = crunchy.idle
        info.find_tunnel_end = crunchy.find_tunnel_end
        info.moving_home = crunchy.moving_home
        info.checking_vein = crunchy.checking_vein
        info.total_block_back = crunchy.total_blocks_back
        return info
    end

    function crunchy.update_gps()
        crunchy.gps_pos = {gps.locate(1)}
        if crunchy.gps_pos[1] == nil then
            print("Failed to get gps position")
            return
        end
    end

    return crunchy
end

function init()
    return Crunchy()
end
