-- Helper function for mining vieins

function move_turtle(move_fnc)
    while (not move_fnc()) do
        file_sys.log_to_file(debug.traceback())
    end
end

function MineApi()
    local mine_api = {}

    function mine_api.mine_vein()
        mine_api.vein_helper({x=0, y=0, z=0}, 'north', {})
    end

    function mine_api.vein_helper (xyz, orientation, traversed)
        for _, direction in ipairs({'up', 'down', 'front', 'back', 'left', 'right'}) do
            local destination, newOrientation = table.unpack(mine_api.calc_dest(xyz, orientation, direction))
            if not mine_api.contains(traversed, destination) then
                if direction ~= 'back' then
                    table.insert(traversed, destination)
                end

                if direction == 'up' then
                    if mine_api.is_treasure(turtle.inspectUp) then
                        mine_api.dig_falling(turtle.digUp, turtle.inspectUp, turtle.up)
                        mine_api.vein_helper(destination, newOrientation, traversed);
                        move_turtle(turtle.down)
                    end
                elseif direction == 'down' then
                    if mine_api.is_treasure(turtle.inspectDown) then
                        turtle.digDown()
                        move_turtle(turtle.down)
                        mine_api.vein_helper(destination, newOrientation, traversed);
                        move_turtle(turtle.up)
                    end
                elseif direction == 'back' then
                    local leftOrient = orientation
                    for i=1, 3 do
                        local calculated = mine_api.calc_dest(xyz, leftOrient, 'left')
                        local leftDest = calculated[1]
                        leftOrient = calculated[2]
                        move_turtle(turtle.turnLeft)
                        table.insert(traversed, leftDest)
                        if mine_api.is_treasure(turtle.inspect) then
                            mine_api.dig_falling(turtle.dig, turtle.inspect, turtle.forward)
                            mine_api.vein_helper(leftDest, leftOrient, traversed);
                            move_turtle(turtle.back)
                        end
                    end
                    move_turtle(turtle.turnLeft)
                else
                    --turn in the direction to inspect
                    if direction == 'left' then move_turtle(turtle.turnLeft)
                    elseif direction == 'right' then move_turtle(turtle.turnRight)
                    end
                    --inspect the block
                    if mine_api.is_treasure(turtle.inspect) then
                        mine_api.dig_falling(turtle.dig, turtle.inspect, turtle.forward)
                        mine_api.vein_helper(destination, newOrientation, traversed);
                        move_turtle(turtle.back)
                    end
                    --unturn to face forwards again
                    if direction == 'left' then move_turtle(turtle.turnRight)
                    elseif direction == 'right' then move_turtle(turtle.turnLeft)
                    end
                end
            end
        end
    end

    function mine_api.is_treasure(inspect_fnc)
        local success, data = inspect_fnc()
        return success and (string.find(data.name, "ore") or
            string.find(data.name, "gravel") or
            string.find(data.name, "sand"))
    end

    function mine_api.contains (table, xyz)
        for _,v in pairs(table) do
            if v['x'] == xyz['x'] and v['y'] == xyz['y'] and v['z'] == xyz['z'] then
                return true
            end
        end
        return false
    end

    function mine_api.calc_dest (xyz, orientation, direction)
        local dest = {x=xyz['x'], y=xyz['y'], z=xyz['z']}
        if direction == 'up' then
            dest['y'] = dest['y'] + 1
        elseif direction == 'down' then
            dest['y'] = dest['y'] - 1
        else
            local cardinals = {north=0, west=1, south=2, east=3}
            local cardinalsReverse = {[0]='north', 'west', 'south', 'east'}
            local leftTurns = {front=0, left=1, back=2, right=3}
            orientation = cardinalsReverse[(cardinals[orientation] + leftTurns[direction]) % 4]
            if orientation == 'north' then
                dest['z'] = dest['z'] + 1
            elseif orientation == 'south' then
                dest['z'] = dest['z'] - 1
            elseif orientation == 'east' then
                dest['x'] = dest['x'] + 1
            elseif orientation == 'west' then
                dest['x'] = dest['x'] - 1
            end
        end
        return {dest, orientation}
    end

    function mine_api.dig_falling(dig_fnc, inspect_fnc, move_fnc)
        while (mine_api.falling_block(inspect_fnc)) do
            dig_fnc()
            os.sleep(1)
        end
        dig_fnc()
        if move_fnc ~= nil then
            while not move_fnc() do
                mine_api.dig_falling(dig_fnc, inspect_fnc, nil)
            end
        end
    end

    function mine_api.falling_block(inspect_fnc)
        local success, data = inspect_fnc()
        if not success then
            return false
        end
        for key, value in pairs(config.falling_blocks) do
            if data.name == value then
                return true
            end
        end
        return false
    end

    return mine_api
end