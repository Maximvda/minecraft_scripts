-- Class for the smeltery

-- Helper variables
local mb_ingot = 144

local function Smeltery()
    -- Initialisation
    local smeltery = {}
    smeltery.periph = peripheral.wrap(config.smelt_per)
    smeltery.fluids = {}
    smeltery.control_timer = nil
    smeltery.current_item = nil
    -- Constants for selection
    smeltery.INGOTS = 0
    smeltery.BLOCKS = 1
    smeltery.RODS = 2
    smeltery.WIRES = 3
    smeltery.PLATES = 4
    smeltery.NONE = 5

    function smeltery.get_info()
        local tanks = smeltery.periph.tanks()
        for i, tank in pairs(tanks) do
            name = tank["name"]
            for item in string.gmatch(name, '([^"_"]+)') do
                name = item
            end
            for item in string.gmatch(name, '([^":"]+)') do
                name = item
            end
            smeltery.fluids[i] = {name, math.floor(tank["amount"]/mb_ingot)}
        end
        return smeltery.fluids
    end

    function smeltery.set_output(selection)
        smeltery.selection = selection
        smeltery.control_timer = os.startTimer(1)
        smeltery.get_info()
        smeltery.current_item = smeltery.fluids[1][1]
        if selection == smeltery.INGOTS then
            print("Smelting ingots")
            redstone.setBundledOutput("top", colors.gray)
        elseif selection == smeltery.BLOCKS then
            print("Smelting blocks")
            redstone.setBundledOutput("top", colors.black)
        elseif selection == smeltery.RODS then
            print("Smelting rods")
            redstone.setBundledOutput("top", colors.brown)
        elseif selection == smeltery.WIRES then
            print("Smelting wires")
            redstone.setBundledOutput("top", colors.red)
        elseif selection == smeltery.PLATES then
            print("Smelting plates")
            redstone.setBundledOutput("top", colors.green)
        else
            redstone.setBundledOutput("top", 0)
        end
    end

    function smeltery.control_tick()
        smeltery.control_timer = os.startTimer(1)
        smeltery.get_info()
        fluid_amount = smeltery.fluids[1][2]
        if fluid_amount == 0 or smeltery.fluids[1][1] ~= smeltery.current_item then
            print("No fluid left, cancling smelt operation")
            smeltery.set_output(smeltery.NONE)
            -- Stop the timer
            os.cancelTimer(smeltery.control_timer)
            local link = link_class.get()
            link.send_data(smeltery.fluids)
            link.send_data("Finished")
            smeltery.current_item = nil
        end
        if smeltery.selection == smeltery.BLOCKS then
            if fluid_amount < config.number_casting_basins*9+6 then
                smeltery.set_output(smeltery.INGOTS)
            end
        end
    end

    smeltery.set_output(smeltery.NONE)

    return smeltery
end


function init()
    return Smeltery()
end