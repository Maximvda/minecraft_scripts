-- Chunky class for following mining turtle

-- Helper variables
local FORWARD = 1
local UP = 2
local DOWN = 3
local LEFT = 4
local RIGHT = 5
local BACKWARD = 6

local function Chunky()
    local chunky = {}
    chunky.gps_pos = nil
    chunky.total_block_back = 0
    chunky.forward_pos = 0
    chunky.turn_at = -1
    chunky.turn_side = LEFT
    chunky.fuel = turtle.getFuelLevel()
    chunky.command_list = {}

    function chunky.handle_command(command)
        table.insert(chunky.command_list, command)
    end

    function chunky.tick()
        if #chunky.command_list == 0 then
            return
        end
        local command = table.remove(chunky.command_list, 1)

        if command == FORWARD then
            chunky.total_block_back = chunky.total_block_back + 1
            turtle.forward()
            chunky.forward_pos = chunky.forward_pos + 1
            chunky.find_veins()
        elseif command == DOWN then
            chunky.total_block_back = chunky.total_block_back + 1
            turtle.down()
        elseif command == UP then
            while (chunky.total_block_back > 0) do
                chunky.total_block_back = chunky.total_block_back - 1
                turtle.up()
            end
        elseif command == LEFT then
            chunky.turn_at = chunky.forward_pos
            chunky.turn_side = LEFT
            turtle.turnLeft()
        elseif command == RIGHT then
            chunky.turn_at = chunky.forward_pos
            chunky.turn_side = RIGHT
            turtle.turnRight()
        elseif command == BACKWARD then
            while chunky.forward_pos > 0 do
                chunky.total_block_back = chunky.total_block_back - 1
                chunky.forward_pos = chunky.forward_pos - 1
                turtle.back()
                if chunky.forward_pos == chunky.turn_at then
                    if chunky.turn_side == LEFT then
                        turtle.turnRight()
                    else
                        turtle.turnLeft()
                    end
                    chunky.turn_at = -1
                end
            end
            table.insert(chunky.command_list, UP)
        end
        if chunky.fuel < chunky.total_block_back + 400 then
            chunky.refuel()
        end
    end

    function chunky.refuel()
        for i=1,16 do
            if turtle.getItemCount(i) > 0 then
                turtle.select(i)
                turtle.refuel(1)
                return
            end
        end
    end

    function chunky.find_veins()
        local link = link_class.get()
        if chunky.check_vein(turtle.inspectUp) then
            link.send_command({UP, chunky.forward_pos})
        end
        turtle.turnLeft()
        if chunky.check_vein(turtle.inspect) then
            link.send_command({LEFT, chunky.forward_pos})
        end
        turtle.turnRight()
        turtle.turnRight()
        if chunky.check_vein(turtle.inspect) then
            link.send_command({RIGHT, chunky.forward_pos})
        end
        turtle.turnLeft()
    end

    function chunky.check_vein(inspect_fnc)
        local success, data = inspect_fnc()
        return success and string.find(data.name, "ore")
    end

    -------------------
    -- INFO FUNCTION --
    function chunky.get_info()
        local info = {}
        chunky.fuel = turtle.getFuelLevel()
        info.fuel = chunky.fuel
        chunky.update_gps()
        info.gps = chunky.gps_pos
        return info
    end

    function chunky.update_gps()
        chunky.gps_pos = {gps.locate(1)}
        if chunky.gps_pos[1] == nil then
            print("Failed to get gps position")
            return
        end
    end

    return chunky
end

function init()
    return Chunky()
end
