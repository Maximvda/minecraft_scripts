-- Class for monitor interface

local function btn_callback(button)
    if (button.label == "Blocks") then
        link.send_command(link.ids.smeltery, 1)
        button.toggle_color()
    elseif (button.label == "Ingots") then
        link.send_command(link.ids.smeltery, 0)
        button.toggle_color()
    elseif (button.label == "Rods") then
        link.send_command(link.ids.smeltery, 2)
        button.toggle_color()
    elseif (button.label == "Wires") then
        link.send_command(link.ids.smeltery, 3)
        button.toggle_color()
    elseif (button.label == "Plates") then
        link.send_command(link.ids.smeltery, 4)
        button.toggle_color()

    end
end

function Interface()
    local interface = {}
    -- Initialise variables
    interface.display = peripheral.wrap(config.monitor)
    interface.buttons = {}
    interface.tanks_displayed = 0
    interface.views = {"smeltery", "reactor"}
    interface.views_index = 1
    interface.reactor_data = nil

    -- Initialise the view
    interface.display.setBackgroundColor(colors.black)
    interface.display.setTextScale(.5)
    interface.display.clear()
    interface.buttons.blocks = button_class.Button("Blocks", 2, 2, interface.display)
    interface.buttons.ingots = button_class.Button("Ingots", 2, 4, interface.display)
    interface.buttons.rods = button_class.Button("Rods", 2, 6, interface.display)
    interface.buttons.wires = button_class.Button("Wires", 2, 8, interface.display)
    interface.buttons.plates = button_class.Button("Plates", 2, 10, interface.display)
    interface.buttons.react_power = button_class.Button("On", 20, 2, interface.display)
    interface.buttons.cycle_left = button_class.Button("<", 44, 18, interface.display)
    interface.buttons.cycle_right = button_class.Button(">", 48, 18, interface.display)

    function interface.show_view(view)
        if view == "smeltery" then
            interface.display.clear()
            interface.buttons.blocks.set_color(colors.orange)
            interface.buttons.ingots.set_color(colors.orange)
            interface.buttons.rods.set_color(colors.orange)
            interface.buttons.wires.set_color(colors.orange)
            interface.buttons.plates.set_color(colors.orange)
        elseif view == "reactor" then
            interface.display.clear()
            interface.set_title("Reactor")
            if interface.reactor_data ~= nil then
                interface.update_reactor_stats(interface.reactor_data)
            end
        elseif view == "lighting" then
            print("TODO showing lighting")
        end
        interface.buttons.cycle_left.set_color(colors.lightGray)
        interface.buttons.cycle_right.set_color(colors.lightGray)
    end

    function interface.show_smeltery_levels(tanks)
        for i=1, interface.tanks_displayed do
            interface.display.setCursorPos(20, i+1)
            interface.display.write("                      ")
        end
        local max = 0
        for i, tank in pairs(tanks) do
            interface.display.setCursorPos(20, i+1)
            interface.display.write(tank[1] .. ": " .. tank[2] .. " ingots")
            max = i
        end
        interface.tanks_displayed = max+1
    end

    function interface.update_reactor_stats(reactor)
        interface.reactor_data = reactor
        interface.display.setCursorPos(2, 3)
        interface.display.write("Energy: "..reactor.energy)
        interface.display.setCursorPos(2, 4)
        interface.display.write("Stored: "..reactor.stored_energy)
        interface.display.setCursorPos(2, 5)
        interface.display.write("Fuel level: "..reactor.fuel_level)
        interface.display.setCursorPos(2, 6)
        interface.display.write("Fuel consumption: "..reactor.fuel_consumption)
        interface.display.setCursorPos(2, 7)
        interface.display.write("Fuel reactivity: "..reactor.fuel_reactivity)
        interface.display.setCursorPos(2, 8)
        interface.display.write("Controlrod level: "..reactor.control_rod)
        interface.display.setCursorPos(2, 9)
        interface.display.write("Fuel temperature: "..reactor.fuel_temp)
        interface.display.setCursorPos(2, 10)
        interface.display.write("Case temperature: "..reactor.casing_temp)
        if reactor.active then
            interface.buttons.react_power.label = "On"
            interface.buttons.react_power.bg_color = colors.green
        else
            interface.buttons.react_power.label = "Off"
            interface.buttons.react_power.bg_color = colors.orange
        end
        interface.buttons.react_power.draw()
    end

    function interface.set_title(title)
        interface.display.setCursorPos(1,1)
        interface.display.write(title)
    end

    function interface.check_touch(pos_x, pos_y)
        for key, but in pairs(interface.buttons) do
            if but.check_touch(pos_x, pos_y) then
                if but.label == ">" then
                    interface.views_index = (interface.views_index + 1) % #interface.views
                    return interface.show_view(interface.views[interface.views_index+1])
                elseif but.label == "<" then
                    interface.views_index = math.abs((interface.views_index - 1) % #interface.views)
                    return interface.show_view(interface.views[interface.views_index+1])
                end
                if btn_callback ~= nil then
                    res = btn_callback(but)
                end
            end
        end
    end

    function interface.set_button_color(but_name, color)
        for i, buts in pairs(interface.buttons) do
            if buts.label == but_name then
                buts.set_color(color)
                return
            end
        end
    end

    return interface
end