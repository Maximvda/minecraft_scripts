-- Class for monitor interface
function Interface(display)
    local interface = {}
    -- Initialise variables
    interface.buttons = {}
    interface.view = "smeltery"
    interface.view_instance = nil
    interface.view_names = {"smeltery", "reactor", "lighting", "turtle"}
    interface.views = {}
    interface.views.turtle = turtles.Get()
    interface.views.reactor = reactor.Get()
    interface.views.smeltery = smeltery.Get()
    interface.views_index = 1
    interface.reactor_data = nil

    -- Initialise the view
    display.setBackgroundColor(colors.black)
    display.setTextScale(.5)
    display.clear()
    -- Cycle buttons
    local buttons = {}
    buttons.cycle_left = button_class.Button("<", 44, 18, display)
    buttons.cycle_right = button_class.Button(">", 48, 18, display)

    function interface.show_view(view)
        interface.view = view
        for i, view_instance in pairs(interface.views) do
            view_instance.set_render_allowed(false)
        end
        display.clear()
        if view == "smeltery" then
            interface.set_title("Smeltery")
            interface.views.smeltery.render()
            interface.view_instance = interface.views.smeltery
        elseif view == "reactor" then
            interface.set_title("Reactor")
            interface.views.reactor.render()
            interface.view_instance = interface.views.reactor
        elseif view == "lighting" then
            interface.set_title("Lighting menu")
            interface.view_instance = nil
        elseif view == "turtle" then
            interface.set_title("Mining turtle")
            interface.views.turtle.render()
            interface.view_instance = interface.views.turtle
        end
        buttons.cycle_left.set_color(colors.lightGray)
        buttons.cycle_right.set_color(colors.lightGray)
    end

    function interface.set_title(title)
        display.setCursorPos(1,1)
        display.write(title)
    end

    -- SHOULD OPTIMISE THIS TO ONLY CHECK BUTTONS THAT ARE IN CORRECT VIEW
    function interface.check_touch(pos_x, pos_y)
        for key, but in pairs(buttons) do
            if but.check_touch(pos_x, pos_y) then
                if but.label == ">" then
                    interface.views_index = (interface.views_index + 1) % #interface.view_names
                    return interface.show_view(interface.view_names[interface.views_index+1])
                elseif but.label == "<" then
                    interface.views_index = math.abs((interface.views_index - 1) % #interface.view_names)
                    return interface.show_view(interface.view_names[interface.views_index+1])
                end
            end
        end
        if interface.views_instance ~= nil then
            for key, but in interface.view_instance do
                if but.check_touch(pos_x, pos_y) then
                    interface.view_instance.btn_cb(button)
                end
            end
        end
    end

    function interface.set_button_color(but_name, color)
        for i, buts in pairs(interface.buttons) do
            if buts.label == but_name then
                buts.set_color(color)
                return
            end
        end
    end

    return interface
end